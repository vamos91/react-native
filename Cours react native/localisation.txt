Expo propose un kit de d√©veloppement pour acc√©der aux diff√©rentes fonctionnalit√©s du device (Camera, Contacts, G√©olocalisation, ...).

La documentation pour manipuler ces fonctionalit√©s est disponible ici : https://docs.expo.io/versions/latest/

L‚Äôavantage de ces fonctionnalit√©s est qu‚Äôelles sont d√©velopp√©es sous forme de module √† installer dans son application. Chacun de ces modules va se plugger autant √† IOS qu‚ÄôAndroid pour nous permettre d‚Äôutiliser tr√®s simplement les fonctionnalit√©s du mobile, peu importe l‚ÄôOS.

Pas besoin de d√©velopper pour iOS puis pour Android, l‚ÄôAPI d‚ÄôExpo s‚Äôoccupe de tout !




1.1 On peut int√©grer les fonctionnalit√©s de la map dans notre application ?
Expo offre effectivement la possibilit√© d‚Äôutiliser les fonctionnalit√©s des Maps de chaque device.

La fonctionnalit√© √† utiliser se nomme MapView : https://docs.expo.io/versions/latest/sdk/map-view/



MapView va utiliser les maps natives de chaque OS : pour iOS, nous allons pouvoir utiliser Plans alors que pour Android, √ßa sera Google Maps.

Si vous souhaitez utiliser Google Maps sur IOS, c‚Äôest √©galement possible, tout est dans la documentation !

Autre avantage de MapView, la possibilit√© d‚Äôutiliser un ensemble de composants cl√©s en main <MapView />, <Marker />, <Overlay />, ‚Ä¶

Ces composants nous permettent de rajouter des fonctionnalit√©s. Par exemple, placer des marqueurs sur la carte.

Tous ces composants sont personnalisables via leurs propri√©t√©s. Par exemple le composant MapView : https://github.com/react-native-maps/react-native-maps/blob/master/docs/mapview.md

1.2 Comment afficher la g√©olocalisation sur la carte ?
L√† encore, Expo propose un module cl√© en main : Location

https://docs.expo.io/versions/latest/sdk/location/



Ce module va nous permettre de r√©cup√©rer les informations de g√©olocalisation du t√©l√©phone.

Pour cela, il faudra que l‚Äôutilisateur nous donne l‚Äôautorisation de manipuler ces donn√©es de g√©olocalisation. Pas de probl√®me, Expo vous offre des fonctions pour g√©rer cela simplement.

√Ä partir du moment o√π notre application poss√®de les droits, elle pourra r√©cup√©rer la position de l‚Äôutilisateur une seule fois ou √† intervalle r√©gulier.

En utilisant les options de MapView et de Location, il nous sera possible d‚Äôafficher la position de l‚Äôutilisateur sur la carte par exemple.



J'ai lu cette partie
2 - STEP BY STEP
2.1 Installer les module pour MapView et la g√©olocalisation
expo install react-native-maps expo-location expo-permissions

Pour utiliser la map de chaque device, nous devons installer le module react-native-maps

Import du composant MapView
import MapView from 'react-native-maps';

Le composant MapView est propos√© par react-native-maps pour afficher la map native de chaque device.

Initialisation de la map
<MapView style={{flex : 1}}
   initialRegion={{
     latitude: 37.78825,
     longitude: -122.4324,
     latitudeDelta: 0.0922,
     longitudeDelta: 0.0421,
   }}
 />

Nous pouvons personnaliser notre map en fournissant des informations sur sa r√©gion initiale :

Longitude et latitude qui correspondent aux informations pour centrer la carte.
latitudeDelta et longitudeDelta pour g√©rer le rayon √† afficher √† partir du centre.
Cela nous permet de g√©rer un niveau de zoom plus ou moins important. Plus ces informations sont grandes, plus le rayon sera important, plus on d√©zoomera.

2.2 Personnaliser la map
2.2.1 Modifier le type d‚Äôaffichage
<MapView mapType ="satellite" />

Il existe plusieurs types de maps √† afficher : satellite, standard, terrain, ...

2.2.2 Afficher les informations du trafic
<MapView showsTraffic ={true} />

2.2.3 D√©sactiver le zoom
<MapView zoomEnabled ={false} />

2.3 Afficher un marqueur
2.3.1 Import du composant Marker
import {Marker} from 'react-native-maps';

On importe le composant Marker de notre module.

Attention, ce composant n‚Äôest pas export√© par d√©faut, il faudra l‚Äôimporter entre { }

2.3.2 Initialisation du composant
<MapView>
 <Marker
   coordinate={{latitude: 48.866667, longitude: 2.333333}}
 />
</MapView>


Le composant Marker va devoir √™tre plac√© √† l‚Äôint√©rieur du composant MapView.

Il faudra au minimum lui fournir un objet contenant la latitude et la longitude dans sa propri√©t√© coordinate.

2.4 Options du marqueur
2.4.1 Ajouter un titre et une description
<Marker
 coordinate={{latitude: 48.866667, longitude: 2.333333}}
 title="Hello"
 description="I am here"
/>

Le Marqueur sera personnalisable. On peut par exemple fournir d‚Äôautres propri√©t√©s comme title ou description.

2.4.2 Rendre le marqueur drag & dropable
<Marker
 coordinate={{latitude: 48.866667, longitude: 2.333333}}
 draggable
/>

La propri√©t√© draggable permet de rendre le marqueur drag&dropable, c‚Äôest-√†-dire de donner la possibilit√© √† l‚Äôutilisateur de le d√©placer sur la map.

2.4.3 Modifier l‚Äôopacit√©

<Marker
 coordinate={{latitude: 48.866667, longitude: 2.333333}}
 opacity={0.5}
/>

2.5 Import des composants Location et Permissions
import * as Location from 'expo-location';
import * as Permissions from 'expo-permissions';


Pour g√©rer la g√©olocalisation, nous devons importer les module expo-location et expo-permissions

Pour utiliser la g√©olocalisation, il faut que l‚Äôutilisateur donne les droits √† notre application. Nous devons donc cr√©er une fonction qui demandera les droits et permettra ensuite dans ce cas √† notre application de r√©cup√©rer la position de l‚Äôutilisateur..
Permissions.askAsync(Permissions.LOCATION) demande l‚Äôautorisation et renvoie un objet contenant une propri√©t√© status. C‚Äôest cette information qui nous permet de savoir si nous avons les droits (granted). Attention, cette fonction est asynchrone. Nous allons donc temporiser la demande (await) et rendre notre fonction askPermissions asynchrone.
Si nous avons les droits, nous pouvons alors r√©cup√©rer la position de l‚Äôutilisateur gr√¢ce √† la fonction Location.getCurrentPositionAsync({}).
import React, {useEffect} from 'react';
import * as Location from 'expo-location';
import * as Permissions from 'expo-permissions';

export default function App() {
 useEffect(() => {
   async function askPermissions() {
     var { status } = await Permissions.askAsync(Permissions.LOCATION);
     if (status === 'granted') {
       var location = await Location.getCurrentPositionAsync({});
     }
   }
   askPermissions();
 }, []);

 return (
   <View>
     ...
   </View>
 );
}

2.5.1 On d√©clare une fonction pour demander l‚Äôautorisation
async function askPermissions() {
 var { status } = await Permissions.askAsync(Permissions.LOCATION);
 if (status === 'granted') {
   var location = await Location.getCurrentPositionAsync({});
 }
}


2.5.2 On ex√©cute la fonction √† l‚Äôinitialisation de notre composant
useEffect(() => {
 async function askPermissions() {
   var { status } = await Permissions.askAsync(Permissions.LOCATION);
   if (status === 'granted') {
     var location = await Location.getCurrentPositionAsync({});
   }
 }
 askPermissions();
}, []);

La fonction askPermissions doit √™tre ex√©cut√©e √† l‚Äôinitialisation de notre composant. Nous l‚Äôappelons alors √† l‚Äôint√©rieur d‚Äôun hook d‚Äôeffet (useEffect) en pr√©cisant en deuxi√®me argument que nous ne souhaitons l'ex√©cuter qu‚Äô√† l‚Äôinitialisation [ ].

Dans cet exemple, nous r√©cup√©rons les informations de g√©olocalisation qu‚Äôune seule fois, √† l‚Äôinitialisation de notre composant.

2.6 La g√©olocalisation en temps r√©el
import React, {useEffect} from 'react';
import * as Location from 'expo-location';
import * as Permissions from 'expo-permissions';

export default function App() {
 useEffect(() => {
   async function askPermissions() {
     let { status } = await Permissions.askAsync(Permissions.LOCATION);
     if (status === 'granted') {
       Location.watchPositionAsync({ distanceInterval: 10 },
         (location) => {
           console.log(location);
         }
       );
     }
   }
   askPermissions();
 }, []);

 return (
   <View>
     ...
   </View>
 );
}

2.6.1 On r√©cup√®re la g√©olocalisation en temps r√©el
Location.watchPositionAsync({distanceInterval: 10},
 (location) => {
   console.log(location);
 }
);

Pour g√©rer la g√©olocalisation en temps r√©el, la m√©canique est semblable √† celle vue pr√©c√©demment.

Un seul changement : nous allons mettre sur √©coute la position de l‚Äôutilisateur pour que l‚Äôinformation nous soit remont√©e √† chaque d√©placement de l‚Äôutilisateur.

La mise sur √©coute se fait avec la fonction Location.watchPositionAsync.

Nous pouvons param√©trer la distance √† parcourir avant que notre t√©l√©phone nous remonte √† nouveau la position de l'utilisateur. Ici une remont√©e sera faite tous les 10 m√®tres.

En deuxi√®me argument, nous fournissons une fonction de callback. Celle-ci sera appel√©e tous les 10 m√®tres en fournissant en argument les informations de position de l‚Äôutilisateur (location).


J'ai lu cette partie
3 - EN SAVOIR PLUS
3.1 Pour d√©ployer son application ?
Expo vous propose une utilisation simplifi√©e de ses modules. Votre application va √™tre facile √† tester en l‚Äô√©mulant dans l‚Äôapplication Expo.

Attention, car l‚Äôapplication Expo poss√®de d√©j√† certains droits qu‚Äôil n‚Äôest pas n√©cessaire de configurer lorsqu‚Äôon √©mule notre application.

Par exemple, pour MapView, l‚Äô‚Äôapplication Expo a des droits pour utiliser Google Maps. Du coup, pas besoin de configurer votre application pour l‚Äôutiliser avec Expo.

Mais quand vous allez d√©ployer votre application, vous ne passerez plus par Expo et votre application n‚Äôaura pas les droits d‚Äôexploiter Google Maps.

Pas d‚Äôinqui√©tude, Expo vous pr√©vient et vous fournit la configuration √† mettre en place pour que votre application fonctionne en standalone : https://docs.expo.io/distribution/building-standalone-apps/

Dans tous les cas, pensez √† bien lire la documentation dans Expo !



1 - CHALLENGE

üëâ Initialisez une nouvelle app appel√©e reactmap-findingnemo.

üëâ G√©n√©rez une map dans le composant App de l'app.

üëâ Mettez en place un marqueur sur les coordonn√©es de la tour Eiffel (longitude:2.294481, latitude: 48.858370).

üëâ Mettez en place une m√©canique permettant de r√©cup√©rer votre position (longitude, latitude) en temps r√©el.

üëâ En utilisant un √©tat nomm√© position, mettez √† jour le composant gr√¢ce aux coordonn√©es re√ßues et mat√©rialisez-les via un marqueur.